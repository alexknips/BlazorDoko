﻿@using BlazorChatSample.Shared


<div class="container">
    <div class="row">
        <div class="col">
        </div>

        <div class="col-sm">
            @* @GetStarting()[2]
            @GetPlayerTricks(GetPlayerTop())
            @GetPlayerPoints(GetPlayerTop()) *@
            @playerStrings[2]
            <div class="container">
                @for (var i = 0;i<cardsTop.Count;i++)
                { 
                    var cardIdx = i;
                    <img class="card" src="cards/green_back.jpg" />
                }
            </div>
        </div>

        <div class="col">
        </div>
    </div>
    <div class="row">
        <div class="col">
            @* @GetPlayerLeft()
            @GetStarting()[1]
            @GetPlayerTricks(GetPlayerLeft())
            @GetPlayerPoints(GetPlayerLeft()) *@
            @playerStrings[1]
            <div class="rotate">
                <div class="container">
                @for (var i = 0;i<cardsLeft.Count;i++)
                { 
                    var cardIdx = i;
                    <img class="card" src="cards/green_back.jpg" />
                }
                </div>
            </div>
        </div>
        <div class="col-sm">
            <div class="container">
                <div class="row">
                    <div class="col">
                    </div>
                    <div class="col-sm">
                        <div class="cardtable">
                        @* @if(GetCardsTable().Keys.Contains(GetPlayerTop())){
                            <img src="cards/@(GetCardsTable()[GetPlayerTop()].ToString()).jpg" width=50%  />
                        } *@
                        </div>
                    </div>
                    <div class="col">
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="cardtable">
                        @* @if(GetCardsTable().Keys.Contains(GetPlayerLeft())){
                            <img src="cards/@(GetCardsTable()[GetPlayerLeft()].ToString()).jpg" width=50%   />
                        } *@
                        </div>
                    </div>
                    <div class="col-sm">
                    </div>
                    <div class="col">
                        <div class="cardtable">
                        @* @if(GetCardsTable().Keys.Contains(GetPlayerRight())){
                            <img src="cards/@(GetCardsTable()[GetPlayerRight()].ToString()).jpg"  />
                        } *@
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                    </div>
                    <div class="col-sm">
                        <div class="cardtable">
                        @* @if(GetCardsTable().Keys.Contains(GetPlayerBottom())){
                            <input type="image" src="cards/@(GetCardsTable()[GetPlayerBottom()].ToString()).jpg"  @onclick="@ClickCardTable"/>
                        } *@
                        </div>
                    </div>
                    <div class="col">
                    </div>
                </div>
            </div>

        </div>
        <div class="col">
            @* @GetPlayerRight()
            @GetStarting()[3]
            @GetPlayerTricks(GetPlayerRight())
            @GetPlayerPoints(GetPlayerRight()) *@
            @playerStrings[3]
            <div class="rotate">
                <div class="container">
                @for (var i = 0;i<cardsRight.Count;i++)
                { 
                    var cardIdx = i;
                    <img class="card" src="cards/green_back.jpg" />
                }
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
        </div>
        <div class="col-sm">
            <div class="cardcontainer">
            @* @GetPlayerBottom()
            @GetStarting()[0]
            @GetPlayerTricks(GetPlayerBottom())
            @GetPlayerPoints(GetPlayerBottom()) *@
            @playerStrings[0]
                <div class="container">
                @for (var i = 0;i<cardsBottom.Count;i++)
                { 
                    var cardIdx = i;
                    @if(activelyPlaying){
                        <div class="card">
                            <input type="image" src="cards/@(cardsBottom[i].ToString()).jpg" @onclick="@(e => ClickCard(cardIdx))" />
                        </div>
                    }
                    else
                    {
                        <img src="cards/green_back.jpg" width=20%  />
                    }
                } 
                </div>
            </div>
        </div>
        <div class="col">
        </div>
    </div>
</div>


@code {
    [Parameter]
    public List<Card> cardsLeft { get; set; }
    [Parameter]
    public List<Card> cardsTop { get; set; }
    [Parameter]
    public List<Card> cardsRight { get; set; }
    [Parameter]
    public List<Card> cardsBottom { get; set; }
    [Parameter]
    public Dictionary<string,Card> cardsTable { get; set; }
    [Parameter]
    public bool activelyPlaying { get; set; }

    [Parameter]
    public List<string> playerStrings { get; set; }

    public EventCallback<int> CardClicked { get; set; }
    public EventCallback<int> CardClickedTable { get; set; }
    
    private async Task ClickCard(int idx)
    {
        if(activelyPlaying) {
            await CardClicked.InvokeAsync(idx);
            @* if(tradingPartner == null) {
                await client.PlayCard(GetOwnCards()[idx]);
            }
            else {
                await client.OfferCard(tradingPartner, GetOwnCards()[idx]);
            } *@
        }
    }

    private async Task ClickCardTable()
    {
        if(activelyPlaying){
            await CardClickedTable.InvokeAsync(0);
        }
        @* if(gameState.ActivePlayers.Contains(username)) {
            Console.WriteLine("card clicked");
            await client.WithdrawCard();
        } *@
    }
}
