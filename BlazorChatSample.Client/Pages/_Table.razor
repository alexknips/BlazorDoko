

<div class="playerstringstyle" style="width: 100vw;position: relative;left: calc(-50vw + 100%);" >@playerStrings[2]</div>
<div class="top">
@* @playerStrings[2] *@
@* <div class="playerstringstyle" style="transform:translate(-10px,0px);text-align: right;" >@playerStrings[2]</div> *@
@for (var i = 0;i<cardsTop.Count;i++)
{ 
    var cardIdx = i;
    @if(revealing) {
        <img class="playing-card" src="cards/@(cardsTop[i].ToString()).jpg" />
    }
    else {
        <img class="playing-card" src="cards/green_back.jpg" />
    }
}
</div>
<div class="left">
 @* <h6>@playerStrings[1]</h6>  *@
@* <div class="left"><div class="playerstringstyle" >@playerStrings[1]</div></div> *@
<div class="playerstringstyle" style="transform:translate(0px,-30px);" >@playerStrings[1]</div>
@for (var i = 0;i<cardsLeft.Count;i++)
{ 
    var cardIdx = i;
    @if(revealing) {
        <img class="rot-playing-card-left"  style="transform: scale(2.5);"  src="cards/@(cardsLeft[i].ToString()).jpg" />
    }
    else {
        <img class="rot-playing-card-left" src="cards/green_back_rot.jpg" />
    }
}
</div>

<div class="middle">
    <div class="cardTable">
        <div class="cardTop">
        @if(cardsTable.Keys.Contains(playerNames[2])){
            <img src="cards/@(cardsTable[playerNames[2]].ToString()).jpg"  />
        }
        </div>
        <div class="cardLeft">
        @if(cardsTable.Keys.Contains(playerNames[1])){
            <img src="cards/@(cardsTable[playerNames[1]].ToString()).jpg"  />
        }
        </div>
        <div class="cardRight">
        @if(cardsTable.Keys.Contains(playerNames[3])){
            <img src="cards/@(cardsTable[playerNames[3]].ToString()).jpg"  />
        }
        </div>
        <div class="cardBottom">
        @if(cardsTable.Keys.Contains(playerNames[0])){
            <input type="image" src="cards/@(cardsTable[playerNames[0]].ToString()).jpg"  @onclick="@(e => ClickCardTable())"/>
        }
        </div>
    </div>
</div>
<div class="right">
@* <h6>@playerStrings[3]</h6> *@
<div class="playerstringstyle" style="transform:translate(0px,30px);" >@playerStrings[3]</div>
@* <div class="right"><div class="playerstringstyle" >@playerStrings[3]</div></div> *@
@for (var i = 0;i<cardsRight.Count;i++)
{ 
    var cardIdx = i;
    @if(revealing) {
        <img class="rot-playing-card-right" style="transform: scale(2.5);"src="cards/@(cardsRight[i].ToString()).jpg" />
    }
    else {
        <img class="rot-playing-card-right" src="cards/green_back_rot.jpg" />
    }
}
</div>

@* <div class="playerstringstyle" style="position: relative;left: -50%;top: 80%" >@playerStrings[0]</div> *@
<div class="bottom">
<div class="playerstringstyle" style="transform:translate(-150px,0px);text-align: right;" >@playerStrings[0]</div>
@* <h6>@playerStrings[0]</h6> *@
@* <div class="bottom"><div class="playerstringstyle">@playerStrings[0]</div></div> *@
@for (var i = 0;i<cardsBottom.Count;i++)
{ 
    var cardIdx = i;
    @if(activelyPlaying){
        @if(cardsBottomMarker.Contains(i)) {
         //   <img class="my-card" style="color: white" src="cards/@(cardsBottom[i].ToString()).jpg" @onclick="@(e => ClickCard(cardIdx))" />
        }
        else {
        <img class="my-card" src="cards/@(cardsBottom[i].ToString()).jpg" @onclick="@(e => ClickCard(cardIdx))" />
        }
    }
    else
    {
        <img class="my-card" src="cards/green_back.jpg" />
    }
}
</div>
<div class="bottomrow">
@* <a class="waves-effect waves-light btn-large"  @onclick="@(e => Claiming())">Claim</a>
<a class="waves-effect waves-light btn-large" @onclick="@(e => ShowLastTrick())">Show last trick</a> *@
@if(cardsBottomMarker.Count == 0) { // show bottom row only if not sorting at the moment
<a class="waves-effect waves-light btn-large"  @onclick="@(e => Claiming())">Stich beanspruchen</a>
<a class="waves-effect waves-light btn-large" @onclick="@(e => ShowLastTrick())">Letzter Stich</a>
@if(tradingPartner == null) {
    @for (var i = 1;i<4;i++)
    { 
        var pId = i;
        <a class="waves-effect waves-light btn-large" @onclick="@(e => Trading(playerNames[pId]))" title="@playerNames[pId]">
            Trumpfabg. (@playerNames[pId])
        </a>
        @* Trade Cards with @playerNames[pId] *@
    }
}
else
{
    <a class="waves-effect waves-light btn-large" @onclick="@(e => Trading(""))">
        Trumpfabgabe beenden 
    </a>
    @* Stop trading *@
}
}
</div>

 
  @* <div class="itemLeft">
        <div class="cardcontainerleft">
        <div class="containersmall">
        @playerStrings[1]
        @for (var i = 0;i<cardsLeft.Count;i++)
        { 
            var cardIdx = i;
            <img class="card" src="cards/green_back.jpg" />
        }
        </div>
        </div>
  </div>
  <div class="itemRight">
        <div class="cardcontainerright">
        <div class="containersmall">
        @playerStrings[3]
        @for (var i = 0;i<cardsRight.Count;i++)
        { 
            var cardIdx = i;
            <img class="card" src="cards/green_back.jpg" />
        }
        </div>
    </div>
  </div>
  <div class="itemTop">
      <div class="cardcontainertop">
        <div class="containersmall">
        @playerStrings[2]
        @for (var i = 0;i<cardsTop.Count;i++)
        { 
            var cardIdx = i;
            <img class="card" src="cards/green_back.jpg" />
        }
        </div>
        </div>
  </div>
  <div class="itemBottom">
    <div class="cardcontainer">
        @playerStrings[0]
            @for (var i = 0;i<cardsBottom.Count;i++)
            { 
                var cardIdx = i;
                @if(activelyPlaying){
                    <div class="card">
                        <input type="image" src="cards/@(cardsBottom[i].ToString()).jpg" @onclick="@(e => ClickCard(cardIdx))" />
                    </div>
                }
                else
                {
                    <img src="cards/green_back.jpg" width=20%  />
                }
            }
    </div>

  </div> *@

@* <div class="container">
    <div class="row">
        <div class="col">
        </div>

        <div class="col-sm">
            @playerStrings[2]
            <div class="container">
                @for (var i = 0;i<cardsTop.Count;i++)
                { 
                    var cardIdx = i;
                    <img class="card" src="cards/green_back.jpg" />
                }
            </div>
        </div>

        <div class="col">
        </div>
    </div>
    <div class="row">
        <div class="col">
            @playerStrings[1]
            <div class="rotate">
                <div class="container">
                @for (var i = 0;i<cardsLeft.Count;i++)
                { 
                    var cardIdx = i;
                    <img class="card" src="cards/green_back.jpg" />
                }
                </div>
            </div>
        </div>
        <div class="col-sm">
            <div class="container">
                <div class="row">
                    <div class="col">
                    </div>
                    <div class="col-sm">
                        <div class="cardtable">
                        @if(cardsTable.Keys.Contains(playerNames[2])){
                            <img src="cards/@(cardsTable[playerNames[2]].ToString()).jpg" width=50%  />
                        }
                        </div>
                    </div>
                    <div class="col">
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="cardtable">
                        @if(cardsTable.Keys.Contains(playerNames[1])){
                            <img src="cards/@(cardsTable[playerNames[1]].ToString()).jpg" width=50%   />
                        }
                        </div>
                    </div>
                    <div class="col-sm">
                    </div>
                    <div class="col">
                        <div class="cardtable">
                        @if(cardsTable.Keys.Contains(playerNames[3])){
                            <img src="cards/@(cardsTable[playerNames[3]].ToString()).jpg"  />
                        }
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                    </div>
                    <div class="col-sm">
                        <div class="cardtable">
                        @if(cardsTable.Keys.Contains(playerNames[0])){
                            <input type="image" src="cards/@(cardsTable[playerNames[0]].ToString()).jpg"  @onclick="@(e => ClickCardTable())"/>
                        }
                        </div>
                    </div>
                    <div class="col">
                    </div>
                </div>
            </div>

        </div>
        <div class="col">
            @playerStrings[3]
            <div class="rotate">
                <div class="container">
                @for (var i = 0;i<cardsRight.Count;i++)
                { 
                    var cardIdx = i;
                    <img class="card" src="cards/green_back.jpg" />
                }
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
        </div>
        <div class="col-sm">
            <div class="cardcontainer">
            @playerStrings[0]
                <div class="container">
                @for (var i = 0;i<cardsBottom.Count;i++)
                { 
                    var cardIdx = i;
                    @if(activelyPlaying){
                        <div class="card">
                            <input type="image" src="cards/@(cardsBottom[i].ToString()).jpg" @onclick="@(e => ClickCard(cardIdx))" />
                        </div>
                    }
                    else
                    {
                        <img src="cards/green_back.jpg" width=20%  />
                    }
                } 
                </div>
            </div>
        </div>
        <div class="col">
        </div>
    </div>
</div> *@


@code {
    [Parameter]
    public List<BlazorChatSample.Shared.Card> cardsLeft { get; set; }
    [Parameter]
    public List<BlazorChatSample.Shared.Card> cardsTop { get; set; }
    [Parameter]
    public List<BlazorChatSample.Shared.Card> cardsRight { get; set; }
    [Parameter]
    public List<BlazorChatSample.Shared.Card> cardsBottom { get; set; }
    [Parameter]
    public List<int> cardsBottomMarker { get; set; }
    [Parameter]
    public Dictionary<string, BlazorChatSample.Shared.Card> cardsTable { get; set; }
    [Parameter]
    public bool activelyPlaying { get; set; }

    [Parameter]
    public string tradingPartner { get; set; }

    [Parameter]
    public List<string> playerStrings { get; set; }
    [Parameter]
    public List<string> playerNames { get; set; }

    [Parameter]
    public EventCallback<int> CardClicked { get; set; }
    [Parameter]
    public EventCallback<int> CardClickedTable { get; set; }

    [Parameter]
    public EventCallback<string> TradingEvent { get; set; }


    [Parameter]
    public EventCallback<int> ClaimingEvent { get; set; }


    [Parameter]
    public EventCallback<int> ShowLastTrickEvent { get; set; }

    [Parameter]
    public bool revealing { get; set; }

    private async Task ClickCard(int idx)
    {
        if (activelyPlaying)
        {
            Console.WriteLine("clicked card " + idx.ToString());
            Console.WriteLine(CardClicked.HasDelegate);
            await CardClicked.InvokeAsync(idx);
        }
    }

    private async Task ClickCardTable()
    {
        if (activelyPlaying)
        {
            await CardClickedTable.InvokeAsync(0);
        }
    }

    private async Task Trading(string partner)
    {
        if (activelyPlaying)
        {
            await TradingEvent.InvokeAsync(partner);
        }
    }
    private async Task Claiming()
    {
        if (activelyPlaying)
        {
            await ClaimingEvent.InvokeAsync(0);
        }
    }
    private async Task ShowLastTrick()
    {
        if (activelyPlaying)
        {
            await ShowLastTrickEvent.InvokeAsync(0);
        }
    }
}