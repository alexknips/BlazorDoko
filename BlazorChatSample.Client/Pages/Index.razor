@using BlazorChatSample.Shared 
@page "/"
@inject NavigationManager navigationManager
           

@* needs to be outside of the grid *@
@if (!playing)
{
    <_NotPlaying message="@message" Join=@Join/>
} 
else
{
<div class="grid">
    <div class="toprow">
    @if (playing)
    {
        <p>You are connected as <b>@username</b></p>
        <a class="waves-effect waves-light btn-large" @onclick="@DisconnectAsync">Disconnect</a>
    }
    @if(playing) {
    <a class="waves-effect waves-light btn-large" @onclick="@(e => Dealing(true))">Deal w/ Nines</a>
    <a class="waves-effect waves-light btn-large" @onclick="@(e => Dealing(false))">Deal w/o Nines</a>
    }
    </div>
    @if (playing) 
    {
        @if(showTable) {
            <_Table cardsLeft="@cardsLeft" cardsRight="@cardsRight" cardsTop="@cardsTop" 
            cardsBottom="@cardsBottom" cardsTable="@cardsTable" activelyPlaying="@activelyPlaying" 
            playerStrings="@playerStrings" playerNames="@playerNames" CardClicked=@ClickCard CardClickedTable=@ClickCardTable
            tradingPartner="@tradingPartner" TradingEvent=@Trading />
        }
        <_Playing showLastTrick="@showLastTrick" lastTrick="@lastTrick" allPlayedCards="@allPlayedCards" />
    }
</div>
}


    
@code  {
    // flag to indicate chat status
    bool playing = false;

    bool roundStarted = false;  // true between first and last played card
    //bool hosting = false;
    string playerlist = null;

    // name of the user who will be playing
    string username = null;
    // where does this person sit?
    
    GameClient client = null;

    // on-screen message
    string message = null;

    // new message input
    string newMessage = null;

    string tradingPartner = null;

    // list of messages in chat
    List<Message> messages = new List<Message>();

    // current gameState of the client
    GameState gameState = null;

    List<Card> lastTrick = new List<Card>();
    List<Card> allPlayedCards = new List<Card>();

    List<Card> cardsLeft = new List<Card>();
    List<Card> cardsRight = new List<Card>();
    List<Card> cardsTop = new List<Card>();
    List<Card> cardsBottom = new List<Card>();
    bool activelyPlaying = false;
    Dictionary<string,Card> cardsTable = new Dictionary<string, Card>();
    List<string> playerStrings = new List<string>();
    List<string> playerNames = new List<string>();

    bool showLastTrick = false;
    bool showTable = false;

    bool collapseNavMenu = true;
    
    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    /// <summary>
    /// Start chat client
    /// </summary>
    async Task Join(Player player)
    //private void Join(EventArgs eargs)
    {
        Console.WriteLine("joining");
        Console.WriteLine(username);
        this.username = player.name;

        try
        {
            // remove old messages if any
            messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;
            client = new GameClient(username, player.seatnumber, baseUrl);
            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;
            client.GameUpdateReceived += UpdateGameState;
            // start the client
            await client.StartAsync();

            playing = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    /// <summary>
    /// Inbound message
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (playing)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            playing = false;
        }
    }

    void UpdateGameState(object sender, GameUpdateEventArgs e)
    {
        Console.WriteLine($"Blazor: receive update game state");
        @* if(client!= null)
            client.gameState = e.GameState; *@
        gameState = e.GameState;
        roundStarted = (gameState.gamePhase == GameState.GamePhase.Playing);
        playerlist = GetPlayerList();
        Console.WriteLine(playerlist);
        
        lastTrick = GetLastTrick();
        allPlayedCards = GetAllPlayedCards();
        showTable = ShowTable();

        cardsLeft = GetPlayerCards(GetPlayerLeft());
        cardsRight = GetPlayerCards(GetPlayerRight());
        cardsTop = GetPlayerCards(GetPlayerTop());
        cardsBottom = GetPlayerCards(GetPlayerBottom());
        activelyPlaying = (GetPlayerBottom() == username);
        cardsTable = GetCardsTable();
        playerStrings = GetPlayerStrings();
        playerNames = GetPlayerNames();

        StateHasChanged();
    }

    async Task Dealing(bool bWithNines)
    {
        await client.ReqDealing(bWithNines);
    }
    async Task Claiming()
    {
        Console.WriteLine("Claiming");
        await client.Claiming();
    }
    
    //private async Task ClickCard(int idx)
    //private async void ClickCard(int idx)
    async Task ClickCard(int idx)
    {
        if(tradingPartner == null) {
            await client.PlayCard(GetOwnCards()[idx]);
        }
        else {
            await client.OfferCard(tradingPartner, GetOwnCards()[idx]);
        }
    }

    private async Task ClickCardTable(int unused)
    {
        if(gameState.ActivePlayers.Contains(username)) {
            await client.WithdrawCard();
        }
    }

    public void LastTrick()
    {
        showLastTrick = !showLastTrick;
        lastTrick = GetLastTrick();
        StateHasChanged();
    }

    private async Task Trading(string receiver)
    {
        if(receiver.Length > 0) {
            tradingPartner = receiver;
        }
        else{
            tradingPartner = null;
        }
        StateHasChanged();
    }

    bool ShowTable(){
        if(gameState == null || gameState.PlayerStates == null)
            return false;
        return (gameState.gamePhase == GameState.GamePhase.Playing || gameState.gamePhase == GameState.GamePhase.Dealt ||gameState.gamePhase == GameState.GamePhase.Done);
    }

    async Task SendAsync()
    {
        if (playing && !string.IsNullOrWhiteSpace(newMessage))
        {
            await client.SendAsync(newMessage);
            newMessage = "";
        }
        
    }

    public Dictionary<string,Card> GetCardsTable()
    {
        if(gameState == null || gameState.PlayerStates == null)
            return new Dictionary<string,Card>();
        //Dictionary<string,Card> currentTrick = new Dictionary<string,Card>();
        //foreach(string player in gameState.CurrentTrick.Keys)
        //{
        //    if(gameState.CurrentTrick[player]!= null)
        //        currentTrick.Add(player,gameState.CurrentTrick[player]);
        //}
        return gameState.CurrentTrick;
    }
    
    public List<Card> GetLastTrick()
    {
        if(showLastTrick == false || gameState == null || gameState.PlayerStates == null)
            return new List<Card>();
        foreach(Card c in gameState.LastTrick.Values.ToList())
            Console.WriteLine(c);
        return gameState.LastTrick.Values.ToList();
    }
    public List<Card> GetAllPlayedCards()
    {
        if(gameState == null || gameState.PlayerStates == null || gameState.gamePhase != GameState.GamePhase.Done)
            return new List<Card>();
        Console.WriteLine((GameState.GamePhase)gameState.gamePhase);
        Console.WriteLine(gameState.AllPlayedCards.Count);
        return gameState.AllPlayedCards;
    }
    public List<Card> GetOwnCards()
    {
        if(GetPlayerBottom() == username)
            return GetPlayerCards(GetPlayerBottom());
        return new List<Card>();
    }
    public List<Card> GetPlayerCards(string playerName)
    {
        if(gameState == null || gameState.PlayerStates == null || playerName == "")
            return new List<Card>();
        if(gameState.PlayerStates.Keys.Contains(playerName))
            return gameState.PlayerStates[playerName].Hand;
        return new List<Card>();
    }

    public int GetPlayerTricks(string playerName)
    {
        if(gameState == null || gameState.PlayerStates == null || playerName == "")
            return 0;
        return gameState.PlayerStates[playerName].numTricks;
    }
    public int GetPlayerPoints(string playerName)
    {
        if(gameState == null || gameState.PlayerStates == null || playerName == "")
            return 0;
        return gameState.PlayerStates[playerName].Points;
    }

    public int GetBottomPlayerIdx()
    {
        if(gameState == null || gameState.PlayerStates == null)
            return -1;
        if(gameState.ActivePlayers.Contains(username)) // player participates
        {
            return gameState.ActivePlayers.IndexOf(username);
        }
        return 0;
    }
    public string GetPlayerBottom()
    {
        if(gameState == null || gameState.PlayerStates == null)
            return "";
        
        return gameState.ActivePlayers[(GetBottomPlayerIdx())%4];   // own player - or who is sitting there instead
    }
    public string GetPlayerLeft()
    {
        if(gameState == null || gameState.PlayerStates == null)
            return "";
        return gameState.ActivePlayers[(GetBottomPlayerIdx() + 1)%4];   // left of own player
    }
    public string GetPlayerTop()
    {
        if(gameState == null || gameState.PlayerStates == null)
            return "";
        return gameState.ActivePlayers[(GetBottomPlayerIdx() + 2)%4];   // top of own player
    }
    public string GetPlayerRight()
    {
        if(gameState == null || gameState.PlayerStates == null)
            return "";
        return gameState.ActivePlayers[(GetBottomPlayerIdx() + 3)%4];   // right of own player
    }

    public List<string> GetStarting()
    {
        List<string> startingString = new List<string>() {"","","",""};
        if(gameState == null || gameState.PlayerStates == null)
            return startingString;
        if(gameState.StartingPlayer == GetPlayerBottom())
            startingString[0] = "*";
        if(gameState.StartingPlayer == GetPlayerLeft())
            startingString[1] = "*";
        if(gameState.StartingPlayer == GetPlayerTop())
            startingString[2] = "*";
        if(gameState.StartingPlayer == GetPlayerRight())
            startingString[3] = "*";
        return startingString;
    }

    private List<string> GetPlayerNames() {
        List<string> players = new List<string>();
        players.Add(GetPlayerBottom());
        players.Add(GetPlayerLeft());
        players.Add(GetPlayerTop());
        players.Add(GetPlayerRight());
        return players;
    }

    private List<string> GetPlayerStrings() {
        List<string> ps = new List<string>();
        List<string> players = GetPlayerNames();
        if(gameState != null){
            if(gameState.gamePhase == GameState.GamePhase.Done) {
                for(int i=0;i<4;i++)
                {
                    ps.Add(players[i] + GetStarting()[i] + ": "+ GetPlayerPoints(players[i]));
                }
            }
            else {
                for(int i=0;i<4;i++)
                {
                    ps.Add(players[i] + GetStarting()[i] + ": "+ GetPlayerTricks(players[i]));
                }
            }        
        }
        else{
            ps.Add("");ps.Add("");ps.Add("");ps.Add("");
        }
        return ps;
    }

    public string GetPlayerList()
    {
        if(gameState == null || gameState.PlayerStates == null)
            return "";
        string playerList = "";
        foreach(string player in gameState.UsernameList)
        {
            playerList += player + ", ";
        }
        Console.WriteLine(playerList);
        try{
            return playerList.Substring(0, Math.Max(0, playerList.Length-2)); // cut away last 2 chars (", ")
        }
        catch{
            return playerList;
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        /// <summary>
        /// Determine CSS classes to use for message div
        /// </summary>
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}