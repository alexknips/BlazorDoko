@using BlazorChatSample.Shared 
@page "/"
@inject NavigationManager navigationManager

<div class="top-row px-4">
    @if (playing)
    {
        <p>You are connected as <b>@username</b></p>
        @if(hosting)
        {
            <p>(hosting)</p>
        }
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    }
</div>

<div class="content px-4">

    <h1>Doppelkopf</h1>

    @if (!playing)
    {
        @* Moved instructions to shared component *@
        @* <Instructions /> *@

        @* <h2>DoKo</h2> *@

        <p>
            Enter your name to start playing:
        </p>

        <input type="text" maxlength="32" @bind="@username" />
        <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Join!</button>
        <div>
            <input type="checkbox" id="hosting" name="hosting" Checked="@hosting">
            <label for="hosting">host</label>
        </div>

        @if (message != null)
        {
            <div class="invalid-feedback">@message</div>
            <small id="emailHelp" class="form-text text-muted">@message</small>
        }
    }

    @if (playing)
    {
        <div id="scrollbox">

            @foreach (var item in messages)
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
            <hr />
            <textarea class="input-lg" placeholder="enter your comment" @bind="@newMessage"></textarea>
            <button class="btn btn-default" @onclick="@SendAsync">Send</button>
            <button class="btn btn-default" @onclick="@Dealing">Deal</button>
            
            @for (var i = 0;i<cards.Count;i++)
            { // just make the cards as a like of buttons
                @* <button class="btn btn-default" @onclick="@ClickCard">@cards[i].ToString()</button> *@
                var cardIdx = i;
                <input type="image" src="cards/@(cards[i].ToString()).jpg" @onclick="@(e => ClickCard(cardIdx))" />
            }
        </div>
    }
</div>

@code  {
    // flag to indicate chat status
    bool playing = false;
    bool hosting = false;

    // name of the user who will be playing
    string username = null;

    ChatClient client = null;

    // on-screen message
    string message = null;

    // new message input
    string newMessage = null;

    // list of messages in chat
    List<Message> messages = new List<Message>();
    List<Server.Card> cards = new List<Server.Card>();

    /// <summary>
    /// Start chat client
    /// </summary>
    async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Please enter a name";
            return;
        };

        try
        {
            // remove old messages if any
            messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;
            client = new ChatClient(username, baseUrl);
            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;
            // start the client
            Console.WriteLine("Index: chart starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chart started?");

            playing = true;

            cards.Add(new Server.Card("AH"));
            cards.Add(new Server.Card("9S"));
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    /// <summary>
    /// Inbound message
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (playing)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            playing = false;
        }
    }

    void ClickCard(int idx)
    {
        //message = cards[idx].ToString() + " was selected";
        message = "a card was clicked: " + cards[idx].ToString();
        Console.WriteLine(message);
    }

    async Task Dealing()
    {
        await client.SendAsync(new BlazorChatSample.Shared.Messages.MessageReqDealing().ToString());
    }

    async Task SendAsync()
    {
        if (playing && !string.IsNullOrWhiteSpace(newMessage))
        {
            // send message to hub
            await client.SendAsync(newMessage);
            // clear input box
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        /// <summary>
        /// Determine CSS classes to use for message div
        /// </summary>
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }

}